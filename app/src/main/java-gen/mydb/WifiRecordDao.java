package mydb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import mydb.WifiRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WIFI_RECORD".
*/
public class WifiRecordDao extends AbstractDao<WifiRecord, Long> {

    public static final String TABLENAME = "WIFI_RECORD";

    /**
     * Properties of entity WifiRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "ID");
        public final static Property SSID = new Property(1, String.class, "SSID", false, "SSID");
        public final static Property BSSID = new Property(2, String.class, "BSSID", false, "BSSID");
        public final static Property Level = new Property(3, int.class, "level", false, "LEVEL");
        public final static Property RSSI = new Property(4, int.class, "RSSI", false, "RSSI");
        public final static Property Pic_x = new Property(5, int.class, "pic_x", false, "PIC_X");
        public final static Property Pic_y = new Property(6, int.class, "pic_y", false, "PIC_Y");
        public final static Property Floor = new Property(7, int.class, "floor", false, "FLOOR");
    };


    public WifiRecordDao(DaoConfig config) {
        super(config);
    }
    
    public WifiRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WIFI_RECORD\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: id
                "\"SSID\" TEXT NOT NULL ," + // 1: SSID
                "\"BSSID\" TEXT NOT NULL ," + // 2: BSSID
                "\"LEVEL\" INTEGER NOT NULL ," + // 3: level
                "\"RSSI\" INTEGER NOT NULL ," + // 4: RSSI
                "\"PIC_X\" INTEGER NOT NULL ," + // 5: pic_x
                "\"PIC_Y\" INTEGER NOT NULL ," + // 6: pic_y
                "\"FLOOR\" INTEGER NOT NULL );"); // 7: floor
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WIFI_RECORD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WifiRecord entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getSSID());
        stmt.bindString(3, entity.getBSSID());
        stmt.bindLong(4, entity.getLevel());
        stmt.bindLong(5, entity.getRSSI());
        stmt.bindLong(6, entity.getPic_x());
        stmt.bindLong(7, entity.getPic_y());
        stmt.bindLong(8, entity.getFloor());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WifiRecord readEntity(Cursor cursor, int offset) {
        WifiRecord entity = new WifiRecord( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // SSID
            cursor.getString(offset + 2), // BSSID
            cursor.getInt(offset + 3), // level
            cursor.getInt(offset + 4), // RSSI
            cursor.getInt(offset + 5), // pic_x
            cursor.getInt(offset + 6), // pic_y
            cursor.getInt(offset + 7) // floor
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WifiRecord entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setSSID(cursor.getString(offset + 1));
        entity.setBSSID(cursor.getString(offset + 2));
        entity.setLevel(cursor.getInt(offset + 3));
        entity.setRSSI(cursor.getInt(offset + 4));
        entity.setPic_x(cursor.getInt(offset + 5));
        entity.setPic_y(cursor.getInt(offset + 6));
        entity.setFloor(cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(WifiRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(WifiRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
